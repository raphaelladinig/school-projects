#ifndef FONT_HPP
#define FONT_HPP

#include <Arduino.h>

// 5x7 font data for ASCII characters
const uint8_t font5x7[] = {
    // Space (ASCII 32)
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    // ! (ASCII 33)
    0x00,
    0x00,
    0x5F,
    0x00,
    0x00,
    0x00,
    0x00,
    // " (ASCII 34)
    0x00,
    0x07,
    0x00,
    0x07,
    0x00,
    0x00,
    0x00,
    // # (ASCII 35)
    0x14,
    0x7F,
    0x14,
    0x7F,
    0x14,
    0x00,
    0x00,
    // $ (ASCII 36)
    0x24,
    0x2A,
    0x7F,
    0x2A,
    0x12,
    0x00,
    0x00,
    // % (ASCII 37)
    0x23,
    0x13,
    0x08,
    0x64,
    0x62,
    0x00,
    0x00,
    // & (ASCII 38)
    0x36,
    0x49,
    0x55,
    0x22,
    0x50,
    0x00,
    0x00,
    // ' (ASCII 39)
    0x00,
    0x05,
    0x03,
    0x00,
    0x00,
    0x00,
    0x00,
    // ( (ASCII 40)
    0x00,
    0x1C,
    0x22,
    0x41,
    0x00,
    0x00,
    0x00,
    // ) (ASCII 41)
    0x00,
    0x41,
    0x22,
    0x1C,
    0x00,
    0x00,
    0x00,
    // * (ASCII 42)
    0x08,
    0x2A,
    0x1C,
    0x2A,
    0x08,
    0x00,
    0x00,
    // + (ASCII 43)
    0x08,
    0x08,
    0x3E,
    0x08,
    0x08,
    0x00,
    0x00,
    // , (ASCII 44)
    0x00,
    0x50,
    0x30,
    0x00,
    0x00,
    0x00,
    0x00,
    // - (ASCII 45)
    0x08,
    0x08,
    0x08,
    0x08,
    0x08,
    0x00,
    0x00,
    // . (ASCII 46)
    0x00,
    0x60,
    0x60,
    0x00,
    0x00,
    0x00,
    0x00,
    // / (ASCII 47)
    0x20,
    0x10,
    0x08,
    0x04,
    0x02,
    0x00,
    0x00,
    // 0 (ASCII 48)
    0x3E,
    0x51,
    0x49,
    0x45,
    0x3E,
    0x00,
    0x00,
    // 1 (ASCII 49)
    0x00,
    0x42,
    0x7F,
    0x40,
    0x00,
    0x00,
    0x00,
    // 2 (ASCII 50)
    0x42,
    0x61,
    0x51,
    0x49,
    0x46,
    0x00,
    0x00,
    // 3 (ASCII 51)
    0x21,
    0x41,
    0x45,
    0x4B,
    0x31,
    0x00,
    0x00,
    // 4 (ASCII 52)
    0x18,
    0x14,
    0x12,
    0x7F,
    0x10,
    0x00,
    0x00,
    // 5 (ASCII 53)
    0x27,
    0x45,
    0x45,
    0x45,
    0x39,
    0x00,
    0x00,
    // 6 (ASCII 54)
    0x3C,
    0x4A,
    0x49,
    0x49,
    0x30,
    0x00,
    0x00,
    // 7 (ASCII 55)
    0x01,
    0x71,
    0x09,
    0x05,
    0x03,
    0x00,
    0x00,
    // 8 (ASCII 56)
    0x36,
    0x49,
    0x49,
    0x49,
    0x36,
    0x00,
    0x00,
    // 9 (ASCII 57)
    0x06,
    0x49,
    0x49,
    0x29,
    0x1E,
    0x00,
    0x00,
    // : (ASCII 58)
    0x00,
    0x36,
    0x36,
    0x00,
    0x00,
    0x00,
    0x00,
    // ; (ASCII 59)
    0x00,
    0x56,
    0x36,
    0x00,
    0x00,
    0x00,
    0x00,
    // < (ASCII 60)
    0x00,
    0x08,
    0x14,
    0x22,
    0x41,
    0x00,
    0x00,
    // = (ASCII 61)
    0x14,
    0x14,
    0x14,
    0x14,
    0x14,
    0x00,
    0x00,
    // > (ASCII 62)
    0x00,
    0x41,
    0x22,
    0x14,
    0x08,
    0x00,
    0x00,
    // ? (ASCII 63)
    0x02,
    0x01,
    0x51,
    0x09,
    0x06,
    0x00,
    0x00,
    // @ (ASCII 64)
    0x32,
    0x49,
    0x79,
    0x41,
    0x3E,
    0x00,
    0x00,
    // A (ASCII 65)
    0x7E,
    0x11,
    0x11,
    0x11,
    0x7E,
    0x00,
    0x00,
    // B (ASCII 66)
    0x7F,
    0x49,
    0x49,
    0x49,
    0x36,
    0x00,
    0x00,
    // C (ASCII 67)
    0x3E,
    0x41,
    0x41,
    0x41,
    0x22,
    0x00,
    0x00,
    // D (ASCII 68)
    0x7F,
    0x41,
    0x41,
    0x22,
    0x1C,
    0x00,
    0x00,
    // E (ASCII 69)
    0x7F,
    0x49,
    0x49,
    0x49,
    0x41,
    0x00,
    0x00,
    // F (ASCII 70)
    0x7F,
    0x09,
    0x09,
    0x01,
    0x01,
    0x00,
    0x00,
    // G (ASCII 71)
    0x3E,
    0x41,
    0x41,
    0x49,
    0x7A,
    0x00,
    0x00,
    // H (ASCII 72)
    0x7F,
    0x08,
    0x08,
    0x08,
    0x7F,
    0x00,
    0x00,
    // I (ASCII 73)
    0x00,
    0x41,
    0x7F,
    0x41,
    0x00,
    0x00,
    0x00,
    // J (ASCII 74)
    0x20,
    0x40,
    0x41,
    0x3F,
    0x01,
    0x00,
    0x00,
    // K (ASCII 75)
    0x7F,
    0x08,
    0x14,
    0x22,
    0x41,
    0x00,
    0x00,
    // L (ASCII 76)
    0x7F,
    0x40,
    0x40,
    0x40,
    0x40,
    0x00,
    0x00,
    // M (ASCII 77)
    0x7F,
    0x02,
    0x04,
    0x02,
    0x7F,
    0x00,
    0x00,
    // N (ASCII 78)
    0x7F,
    0x04,
    0x08,
    0x10,
    0x7F,
    0x00,
    0x00,
    // O (ASCII 79)
    0x3E,
    0x41,
    0x41,
    0x41,
    0x3E,
    0x00,
    0x00,
    // P (ASCII 80)
    0x7F,
    0x09,
    0x09,
    0x09,
    0x06,
    0x00,
    0x00,
    // Q (ASCII 81)
    0x3E,
    0x41,
    0x51,
    0x21,
    0x5E,
    0x00,
    0x00,
    // R (ASCII 82)
    0x7F,
    0x09,
    0x19,
    0x29,
    0x46,
    0x00,
    0x00,
    // S (ASCII 83)
    0x46,
    0x49,
    0x49,
    0x49,
    0x31,
    0x00,
    0x00,
    // T (ASCII 84)
    0x01,
    0x01,
    0x7F,
    0x01,
    0x01,
    0x00,
    0x00,
    // U (ASCII 85)
    0x3F,
    0x40,
    0x40,
    0x40,
    0x3F,
    0x00,
    0x00,
    // V (ASCII 86)
    0x1F,
    0x20,
    0x40,
    0x20,
    0x1F,
    0x00,
    0x00,
    // W (ASCII 87)
    0x7F,
    0x20,
    0x18,
    0x20,
    0x7F,
    0x00,
    0x00,
    // X (ASCII 88)
    0x63,
    0x14,
    0x08,
    0x14,
    0x63,
    0x00,
    0x00,
    // Y (ASCII 89)
    0x03,
    0x04,
    0x78,
    0x04,
    0x03,
    0x00,
    0x00,
    // Z (ASCII 90)
    0x61,
    0x51,
    0x49,
    0x45,
    0x43,
    0x00,
    0x00,
};

inline const uint8_t *getCharData(char c) {
  if (c < 32 || c > 90) {
    return &font5x7[0];
  }
  return &font5x7[(c - 32) * 7];
}

#endif
