@using mvc.Services
@{
    ViewData["Title"] = "Chat";
    var username = Context.Session.GetString("username");
}

<div class="matrix-wrapper">
    <canvas class="matrix-canvas left"></canvas>
    <div class="chat-container">
        <ul id="messagesList" class="chat-messages"></ul>

        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="send message" autocomplete="off" />
            <button onclick="sendMessage()">Senden</button>
        </div>
    </div>
    <canvas class="matrix-canvas right"></canvas>
</div>
<style>
    body {
        background-color: #ff0000;
        color: #ff0000;
        font-family: 'Courier New', Courier, monospace;
        margin: 0;
        padding: 0;
        height: 100vh;
    }

    .matrix-wrapper {
        display: flex;
        height: 100vh;
        width: 100vw;
        overflow: hidden;
    }

    .matrix-canvas {
        width: 20vw;
        height: 100%;
        display: block;
    }

    .matrix-canvas.left {
        border-right: 1px solid #ff0000;
    }

    .matrix-canvas.right {
        border-left: 1px solid #ff0000;
    }

    .chat-container {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        height: 100vh;
    }

    .chat-header {
        padding: 10px;
        background-color: #ff0000; 
        border-bottom: 1px solid #0f0;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
        background-color: #000;
    }

    .chat-messages li {
        list-style: none;
        margin-bottom: 5px;
        word-break: break-word;
    }

    .chat-input {
        display: flex;
        padding: 10px;
        background-color: #111;
        border-top: 1px solid #0f0;
    }

    .chat-input input {
        flex: 1;
        padding: 10px;
        background-color: #000;
        color: #0f0;
        border: 1px solid #0f0;
        outline: none;
        font-family: monospace;
    }

    .chat-input button {
        background-color: #000;
        color: #0f0;
        border: 1px solid #0f0;
        padding: 10px 20px;
        margin-left: 10px;
        cursor: pointer;
        font-family: monospace;
    }

    .chat-input button:hover {
        background-color: #0f0;
        color: #000;
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<script>
    const matrixCanvases = document.querySelectorAll(".matrix-canvas");

    matrixCanvases.forEach(canvas => {
        const ctx = canvas.getContext("2d");
        const w = canvas.width = canvas.offsetWidth;
        const h = canvas.height = canvas.offsetHeight;
        const letters = "uwuUWU".split("");
        const fontSize = 14;
        const columns = Math.floor(w / fontSize);
        const drops = Array(columns).fill(1);

        function drawMatrixRain() {
            ctx.fillStyle = "rgba(0, 0, 0, 0.05)";
            ctx.fillRect(0, 0, w, h);
            ctx.fillStyle = "#f00";
            ctx.font = fontSize + "px monospace";

            for (let i = 0; i < drops.length; i++) {
                const text = letters[Math.floor(Math.random() * letters.length)];
                ctx.fillText(text, i * fontSize, drops[i] * fontSize);
                if (drops[i] * fontSize > h || Math.random() > 0.975) {
                    drops[i] = 0;
                }
                drops[i]++;
            }
        }

        setInterval(drawMatrixRain, 33);
    });

    const username = "@Html.Raw(username)";

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();

    connection.on("ReceiveMessage", function (user, message) {
        const li = document.createElement("li");
        li.innerHTML = `<span style='color:#0f0;'>>> </span><strong>${user}</strong>: ${message}`;
        document.getElementById("messagesList").appendChild(li); // Corrected ID
        document.getElementById("messagesList").scrollTop = document.getElementById("messagesList").scrollHeight; 
    });

    connection.start().then(() => {
        console.log("[Connected to ChatHub]");
    }).catch(err => console.error(err.toString()));

    function sendMessage() {
        const input = document.getElementById("messageInput");
        const text = input.value.trim();
        if (!text) return;

        connection.invoke("SendMessage", username, text).catch(err => console.error(err.toString()));
        input.value = "";
        input.focus();

        const synth = window.speechSynthesis;
        if (synth) {
            const synthUtterance = new SpeechSynthesisUtterance("message sent");
            synthUtterance.pitch = 2;
            synthUtterance.rate = 1.5;
            synthUtterance.volume = 0.4;
            synth.speak(synthUtterance);
        } else {
            console.warn("SpeechSynthesis not supported in this browser.");
        }
    }

    document.getElementById("messageInput").addEventListener("keyup", function (e) {
        if (e.key === "Enter") sendMessage();
        if (this.value === "/hack") {
            const li = document.createElement("li");
            li.innerHTML = `<pre style="color:red;">[ACCESSING üîê]\n‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí 10%</pre>`;
            document.getElementById("messagesList").appendChild(li);
            this.value = "";
        }
    });
</script>
